deploy-to-ec2:
  needs: build-push
  runs-on: ubuntu-latest
  timeout-minutes: 15
  steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60
        script: |
          set -e

          # Build registry from known secrets (expanded by Actions before running remotely)
          REG="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          REPO="${{ env.ECR_REPOSITORY }}"
          TAG="${{ env.IMAGE_TAG }}"

          echo "Deploy: registry=$REG repo=$REPO tag=$TAG"

          # Ensure aws CLI is available (on the EC2 host). If not, the next command will fail.
          # This login expects the EC2 instance to have an Instance Role with ECR permissions
          aws ecr get-login-password --region "${{ secrets.AWS_REGION }}" \
            | docker login --username AWS --password-stdin "${REG}"

          # Pull the image that we previously pushed in build-push
          docker pull "${REG}/${REPO}:${TAG}"

          # Stop & remove existing container (if any) and run the new one
          APP_NAME="mediplux-web"
          docker rm -f "${APP_NAME}" || true

          docker run -d \
            --name mediplux-web2 \
            --restart=always \
            -p 80:80 \
            "${REG}/${REPO}:${TAG}"

          # Output quick status so logs show the running container and ports
          docker ps --filter "name=mediplux-web2" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
