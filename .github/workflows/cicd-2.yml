name: Build, Push and Deploy to EC2

on:
  workflow_dispatch:

jobs:
  build-push:
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: mediplux-ecr
      IMAGE_TAG: v1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR (private registry)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Optional: show which registry we will use (safe)
      - name: Show registry (diagnostic)
        run: echo "Registry = '${{ steps.login-ecr.outputs.registry }}'"

      - name: Build, tag, and push image to Amazon ECR
        run: |
          # fail fast if registry is empty (avoids invalid tag like /repo:tag)
          if [ -z "${{ steps.login-ecr.outputs.registry }}" ]; then
            echo "ERROR: ECR registry value is empty. Check login step and AWS credentials."
            exit 1
          fi

          REG=${{ steps.login-ecr.outputs.registry }}
          REPO=${{ env.ECR_REPOSITORY }}
          TAG=${{ env.IMAGE_TAG }}

          docker build -t ${REPO}:${TAG} .
          docker tag ${REPO}:${TAG} ${REG}/${REPO}:${TAG}
          docker tag ${REPO}:${TAG} ${REG}/${REPO}:latest
          docker push ${REG}/${REPO}:${TAG}
          docker push ${REG}/${REPO}:latest

  # ---------------------------
  # NEW JOB: deploy-to-ec2
  # ---------------------------
  deploy-to-ec2:
  needs: build-push
  runs-on: ubuntu-latest
  timeout-minutes: 15
  steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60
        script: |
          set -e

          # Build registry from known secrets (expanded by Actions before running remotely)
          REG="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          REPO="${{ env.ECR_REPOSITORY }}"
          TAG="${{ env.IMAGE_TAG }}"

          echo "Deploy: registry=$REG repo=$REPO tag=$TAG"

          # Ensure aws CLI is available (on the EC2 host). If not, the next command will fail.
          # This login expects the EC2 instance to have an Instance Role with ECR permissions
          aws ecr get-login-password --region "${{ secrets.AWS_REGION }}" \
            | docker login --username AWS --password-stdin "${REG}"

          # Pull the image that we previously pushed in build-push
          docker pull "${REG}/${REPO}:${TAG}"

          # Stop & remove existing container (if any) and run the new one
          APP_NAME="mediplux-web"
          docker rm -f "${APP_NAME}" || true

          docker run -d \
            --name mediplux-web2 \
            --restart=always \
            -p 80:80 \
            "${REG}/${REPO}:${TAG}"

          # Output quick status so logs show the running container and ports
          docker ps --filter "name=mediplux-web2" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

